
/*  v1 */
void	master(char *command, t_data *data)
{
	int		i;
	int		pipefd[2];
	t_data	*cpy_data;

	cpy_data = data;
	insert_data(data, command);

	pipe(pipefd);
	data->copy_fd = dup(STDOUT_FILENO_1);
	while (data->btree)
	{
		//////////////////////////////////////////////////////////////////////////

		i = 0;
		if (ft_strlen_1(data->btree->content[i]) == 0)
			i++;
		
		//////////////////////////////////////////////////////////////////////////

		if (data->is_pipe && data->btree->right)
		{
			data->write_on_the_pipe = -1;
			data->read_in_the_pipe = pipefd[0];
			dup2(data->write_on_the_pipe, STDOUT_FILENO_1);
		}
		else if (data->is_pipe && !data->btree->right)
		{
			data->write_on_the_pipe = pipefd[1];
			data->read_in_the_pipe = -1;
			dup2(data->copy_fd, STDOUT_FILENO_1);
		}
		
		//////////////////////////////////////////////////////////////////////////

		ft_printf("[%s]\n", data->btree->content[i]);

		//////////////////////////////////////////////////////////////////////////

		if (!ft_strncmp(data->btree->content[i], "exit", ft_strlen_1(data->btree->content[i])))
			exit_(data);
		else if (!ft_strncmp(data->btree->content[i], "pwd", ft_strlen_1(data->btree->content[i])))
			pwd(data);
		else if (!ft_strncmp(data->btree->content[i], "cd", ft_strlen_1(data->btree->content[i])))
			cd(data);
		else if (!ft_strncmp(data->btree->content[i], "echo", ft_strlen_1(data->btree->content[i])))
			echo(data);
		else if (!ft_strncmp(data->btree->content[i], "env", ft_strlen_1(data->btree->content[i])))
			env(data);
		else if (!ft_strncmp(data->btree->content[i], "export", ft_strlen_1(data->btree->content[i])))
			export(data);
		else if (!ft_strncmp(data->btree->content[i], "unset", ft_strlen_1(data->btree->content[i])))
			unset(data);
		else
			other_command(data);
		
		/////////////////////////////////////////////////////////////////////////
		
		data->btree = data->btree->right;
	}

	free_all_data(cpy_data);
}





/* v2 */

void	master(char *command, t_data *data)
{
	int		i;
	int		pid;
	char	*path;
	t_btree	*aux;

	insert_data(data, command);
	aux = data->btree;
	path = NULL;
	while (aux)
	{
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		i = 0;
		if (ft_strlen_1(aux->content[i]) == 0)
			i++;
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		if (ft_strnstr(aux->content[i], "/", ft_strlen_1(aux->content[i])) ||
			list_builtins(aux->content[i]))
			path = ft_strdup(aux->content[i]);
		else
			path = get_valid_path(data);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		pid = fork();
		if (pid == 0)
		{
			/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			if (path == NULL)
			{
				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				change_environment_variables_question_mark(127, data);
				write(2, "command not found: \n", 20);
				ft_putstr_fd(aux->content[i], 2);

				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				if (data->path)
					free_mtx(data->path);
				if (data->envp)
					free_mtx(data->envp);
				free_all_data(data);
				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				exit(127);
				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			}
			else if (!ft_strncmp(aux->content[i], "exit", ft_strlen_1(aux->content[i])))
			{
				free(path);
				exit_(data);
			}
			else if (!ft_strncmp(aux->content[i], "pwd", ft_strlen_1(aux->content[i])))
				pwd(data);
			else if (!ft_strncmp(aux->content[i], "cd", ft_strlen_1(aux->content[i])))
				cd(data);
			else if (!ft_strncmp(aux->content[i], "echo", ft_strlen_1(aux->content[i])))
				echo(data);
			else if (!ft_strncmp(aux->content[i], "env", ft_strlen_1(aux->content[i])))
				env(data);
			else if (!ft_strncmp(aux->content[i], "export", ft_strlen_1(aux->content[i])))
				export(data);
			else if (!ft_strncmp(aux->content[i], "unset", ft_strlen_1(aux->content[i])))
				unset(data);
			else
				execve(path, aux->content, data->envp);

			change_environment_variables_question_mark(0, data);
			
			if (data->path)
				free_mtx(data->path);
			if (data->envp)
				free_mtx(data->envp);
			
			free_all_data(data);
			
			free(path);
			
			exit(0);
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		}
		else
		{
			wait(NULL);
			free(path);
			aux = aux->right;
		}
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
	// ft_printf("|\n\n\n\n\n\n\n\n\n\n\n|");
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// if (!ft_strncmp(aux->content[i], "exit", ft_strlen_1(aux->content[i])))
	// {
	// 	if (data->path)
	// 	{
	// 		free_mtx(data->path);
	// 		data->path = NULL;
	// 	}
	// 	if (data->envp)
	// 	{
	// 		free_mtx(data->envp);
	// 		data->envp = NULL;
	// 	}
	// }
	// free_all_data(data);
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}





