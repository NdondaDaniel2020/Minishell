void	get_the_range_of_the_string(char *env_var, int *start, int *end)
{
	*start = *end;
	while (env_var[*end] && (ft_isalnum(env_var[*end])
		|| env_var[*end] == '_' || env_var[*end] == '?'))
		(*end)++;
}

char	*break_the_content_of_double_quotes(int start, int end, char *env_var, t_data *data)
{
	char	*string;
	char	*string_exp;

	if (start == end && env_var[end - 1] == '$')
		string_exp = ft_strdup("$");
	else if (start != end)
	{
		string = substring(env_var, start, end);
		string_exp = adjustment_in_the_extraction_string(string, data);
		free(string);
	}
	return (string_exp);
}

static void	join_expanded_content_util(char **sub, char **string_exp, char **join)
{
	if ((*join) == NULL)
	{	
		(*join) = ft_strjoin_free((*sub), (*string_exp));
		free((*string_exp));
	}
	else
	{
		(*join) = ft_strjoin_free((*join), (*sub));
		(*join) = ft_strjoin_free((*join), (*string_exp));
		free((*string_exp));
		free((*sub));
	}
}

void	join_expanded_content(char **sub, char **string_exp, char **join)
{
	if ((*sub) == NULL && (*string_exp))
	{
		if ((*join) == NULL)
			(*join) = ft_strdup((*string_exp));
		else
			(*join) = ft_strjoin_free((*join), (*string_exp));
		free((*string_exp));
	}
	else if ((*sub) && (*string_exp))
		join_expanded_content_util(sub, string_exp, join);
	else
	{
		(*join) = ft_strjoin_free((*join), (*sub));
		free((*sub));
	}
}

char	*expand_double_quote_content(char *env_var, t_index_str *index, t_data *data)
{
	int		end;
	int		start;
	char	*sub;
	char	*string_exp;
	char	*join;

	end = 0;
	start = 1;
	join = NULL;
	while (env_var[end])
	{
		sub == NULL;
		string_exp = NULL;
		sub = get_sub(env_var, &end);
		get_the_range_of_the_string(env_var, &start, &end);
		string_exp = break_the_content_of_double_quotes(start, end, env_var, data);
		join_expanded_content(&sub, &string_exp, &join);
	}
	index->index++;
	return (join);
}










//////////









char	*expand_double_quote_content(char *env_var, t_index_str *index, t_data *data)
{
	int		end;
	int		start;
	char	*sub;
	char	*string_exp;
	char	*join;

	end = 0;
	start = 0;
	sub = NULL;
	join = NULL;
	string_exp = NULL;
	while (end < ft_strlen(env_var) && env_var[end])
	{
		sub == NULL;
		string_exp = NULL;
		sub = get_sub(env_var, &end);
		start = end;
		/////
		while (end < ft_strlen(env_var) && env_var[end] && (ft_isalnum(env_var[end]) || env_var[end] == '_' || env_var[end] == '?'))
			end++;
		/////
		if (start == end && env_var[end - 1] == '$')
			string_exp = ft_strdup("$");
		else if (start != end)
		{
			char *string;
	
			string = substring(env_var, start, end);
			string_exp = adjustment_in_the_extraction_string(string, data);
			free(string);
		}
		/////
		if (sub == NULL && string_exp)
		{
			if (join == NULL)
				join = ft_strdup(string_exp);
			else
				join = ft_strjoin_free(join, string_exp);
			free(string_exp);
		}
		else if (sub && string_exp)
		{
			if (join == NULL)
			{	
				join = ft_strjoin_free(sub, string_exp);
				free(string_exp);
			}
			else
			{
				join = ft_strjoin_free(join, sub);
				join = ft_strjoin_free(join, string_exp);
				free(string_exp);
				free(sub);
			}
		}
		else
		{
			join = ft_strjoin_free(join, sub);
			free(sub);
		}
	}
	index->index++;
	free(env_var);
	return (join);
}


