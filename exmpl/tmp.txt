
/*  v1 */
void	master(char *command, t_data *data)
{
	int		i;
	int		pipefd[2];
	t_data	*cpy_data;

	cpy_data = data;
	insert_data(data, command);

	pipe(pipefd);
	data->copy_fd = dup(STDOUT_FILENO_1);
	while (data->btree)
	{
		//////////////////////////////////////////////////////////////////////////

		i = 0;
		if (ft_strlen_1(data->btree->content[i]) == 0)
			i++;
		
		//////////////////////////////////////////////////////////////////////////

		if (data->is_pipe && data->btree->right)
		{
			data->write_on_the_pipe = -1;
			data->read_in_the_pipe = pipefd[0];
			dup2(data->write_on_the_pipe, STDOUT_FILENO_1);
		}
		else if (data->is_pipe && !data->btree->right)
		{
			data->write_on_the_pipe = pipefd[1];
			data->read_in_the_pipe = -1;
			dup2(data->copy_fd, STDOUT_FILENO_1);
		}
		
		//////////////////////////////////////////////////////////////////////////

		ft_printf("[%s]\n", data->btree->content[i]);

		//////////////////////////////////////////////////////////////////////////

		if (!ft_strncmp(data->btree->content[i], "exit", ft_strlen_1(data->btree->content[i])))
			exit_(data);
		else if (!ft_strncmp(data->btree->content[i], "pwd", ft_strlen_1(data->btree->content[i])))
			pwd(data);
		else if (!ft_strncmp(data->btree->content[i], "cd", ft_strlen_1(data->btree->content[i])))
			cd(data);
		else if (!ft_strncmp(data->btree->content[i], "echo", ft_strlen_1(data->btree->content[i])))
			echo(data);
		else if (!ft_strncmp(data->btree->content[i], "env", ft_strlen_1(data->btree->content[i])))
			env(data);
		else if (!ft_strncmp(data->btree->content[i], "export", ft_strlen_1(data->btree->content[i])))
			export(data);
		else if (!ft_strncmp(data->btree->content[i], "unset", ft_strlen_1(data->btree->content[i])))
			unset(data);
		else
			other_command(data);
		
		/////////////////////////////////////////////////////////////////////////
		
		data->btree = data->btree->right;
	}

	free_all_data(cpy_data);
}





/* v2 */

void	master(char *command, t_data *data)
{
	int		i;
	int		pid;
	char	*path;
	t_btree	*aux;

	insert_data(data, command);
	aux = data->btree;
	path = NULL;
	while (aux)
	{
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		i = 0;
		if (ft_strlen_1(aux->content[i]) == 0)
			i++;
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		if (ft_strnstr(aux->content[i], "/", ft_strlen_1(aux->content[i])) ||
			list_builtins(aux->content[i]))
			path = ft_strdup(aux->content[i]);
		else
			path = get_valid_path(data);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		pid = fork();
		if (pid == 0)
		{
			/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			if (path == NULL)
			{
				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				change_environment_variables_question_mark(127, data);
				write(2, "command not found: \n", 20);
				ft_putstr_fd(aux->content[i], 2);

				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				if (data->path)
					free_mtx(data->path);
				if (data->envp)
					free_mtx(data->envp);
				free_all_data(data);
				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				exit(127);
				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			}
			else if (!ft_strncmp(aux->content[i], "exit", ft_strlen_1(aux->content[i])))
			{
				free(path);
				exit_(data);
			}
			else if (!ft_strncmp(aux->content[i], "pwd", ft_strlen_1(aux->content[i])))
				pwd(data);
			else if (!ft_strncmp(aux->content[i], "cd", ft_strlen_1(aux->content[i])))
				cd(data);
			else if (!ft_strncmp(aux->content[i], "echo", ft_strlen_1(aux->content[i])))
				echo(data);
			else if (!ft_strncmp(aux->content[i], "env", ft_strlen_1(aux->content[i])))
				env(data);
			else if (!ft_strncmp(aux->content[i], "export", ft_strlen_1(aux->content[i])))
				export(data);
			else if (!ft_strncmp(aux->content[i], "unset", ft_strlen_1(aux->content[i])))
				unset(data);
			else
				execve(path, aux->content, data->envp);

			change_environment_variables_question_mark(0, data);
			
			if (data->path)
				free_mtx(data->path);
			if (data->envp)
				free_mtx(data->envp);
			
			free_all_data(data);
			
			free(path);
			
			exit(0);
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		}
		else
		{
			wait(NULL);
			free(path);
			aux = aux->right;
		}
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
	// ft_printf("|\n\n\n\n\n\n\n\n\n\n\n|");
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// if (!ft_strncmp(aux->content[i], "exit", ft_strlen_1(aux->content[i])))
	// {
	// 	if (data->path)
	// 	{
	// 		free_mtx(data->path);
	// 		data->path = NULL;
	// 	}
	// 	if (data->envp)
	// 	{
	// 		free_mtx(data->envp);
	// 		data->envp = NULL;
	// 	}
	// }
	// free_all_data(data);
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}









////////////////////////////////////////////////////////////////////////////////////////////////////////

t_extract	extract_redirection_character(char *str)
{
	int			pos;
	char		*str_strim;
	t_extract	ext;

	init_extract(&ext);
	pos = get_position_chr('>', str);
	while ((str[pos + ext.end] == ' ')
		|| (str[pos + ext.end] == '>')
		|| (str[pos + ext.end] == '<'))
		ext.end++;
	while (((pos - ext.start) >= 0)
		&& ((str[pos + ext.start] == ' ')
		|| (str[pos + ext.start] == '>')
		|| (str[pos + ext.start] == '<')))
		ext.start++;
	ext.end++;
	ext.start--;
	str_strim = ft_substr(str, (pos - ext.start), ext.end);
	ext.string = ft_strtrim(str_strim, " ");
	free(str_strim);
	return (ext);
}

// t_extract	**extract_all_redirection_characters(char *str)
// {
// 	t_extract	**mtx_extx;	
// }
////////////////////////////////////////////////////////////////////////////////////////////////////////





















/////////////
static bool	condition_extract(int i, int pos, char *str, char **list)
{
	int	len;

	len = ft_strlen(str);
	return ((pos != 0 && ((pos + 1 < len && str[pos + 1] != list[i][0])
					|| ((pos + 1 < len && str[pos + 1] == list[i][0])
					&& (pos + 2 < len && str[pos + 2] != list[i][0]))))
			|| (pos == 0 && ((pos + 1 < len && str[pos + 1] != list[i][0])
					|| ((pos + 1 < len && str[pos + 1] == list[i][0])
					&& (pos + 2 < len && str[pos + 2] != list[i][0]))))
			|| (pos != 0));
}

static bool	condition_to_add(char *str, char **new_content)
{
	return (str_in_matrix(str, new_content) == false
			&& (count_extract_redirection('<', str) == 0)
			&& (count_extract_redirection('>', str) == 0));
}

int	new_repartision(int iter, char *str, char **new_content)
{
	int			i;
	int			pos;
	static char	*list[] = {"<>", ">>", "<<","<", ">", NULL};

	i = 0;
	while (list[i])
	{
		pos = ft_strnpos(str, list[i], ft_strlen(str));
		if (ft_strncmp(str + pos, list[i], ft_strlen(list[i])) == 0
			&& condition_extract(i, pos, str, list))
		{
			many_redirection(str, new_content, &iter);
			break ;
		}
		else if (condition_to_add(str, new_content))
		{
			new_content[iter] = ft_strdup(str);
			iter++;
			break ;
		}
		i++;
	}
	return (iter);
}
/////////////

char	**reset_the_array_for_redirection(char **content)
{
	int		i;
	int		iter;
	int		len_m;
	char	**new_content;

	i = 0;
	len_m = 0;
	len_m = len_matrix(content);
	while (content[i])
	{
		len_m = str_in_list_redirection(content[i], len_m);
		i++;
	}
	if (len_matrix(content) == len_m)
		return (NULL);
	new_content = (char **)ft_calloc(len_m + 1, sizeof(char *));
	i = 0;
	iter = 0;
	while (content[i])
	{
		iter = new_repartision(iter, content[i], new_content);
		i++;
	}
	return (new_content);
}

int	main(void)
{
	int		i;
	char	**new_content;
	char	**content;

	content = (char **)ft_calloc(9, sizeof(char *));
	content[0] = ft_strdup("echo>file");
	content[1] = ft_strdup("test");
	content[2] = ft_strdup("test1");
	content[3] = ft_strdup("test2");
	new_content = reset_the_array_for_redirection(content);
	if (new_content)
	{
		i = 0;
		while (new_content[i])
		{
			printf("new_content[%d] = %s\n", i, new_content[i]);
			i++;
		}
		free_matrix(new_content);
	}
	free_matrix(content);
	return (0);
}






