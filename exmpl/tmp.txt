
/*  v1 */
void	master(char *command, t_data *data)
{
	int		i;
	int		pipefd[2];
	t_data	*cpy_data;

	cpy_data = data;
	insert_data(data, command);

	pipe(pipefd);
	data->copy_fd = dup(STDOUT_FILENO_1);
	while (data->btree)
	{
		//////////////////////////////////////////////////////////////////////////

		i = 0;
		if (ft_strlen_1(data->btree->content[i]) == 0)
			i++;
		
		//////////////////////////////////////////////////////////////////////////

		if (data->is_pipe && data->btree->right)
		{
			data->write_on_the_pipe = -1;
			data->read_in_the_pipe = pipefd[0];
			dup2(data->write_on_the_pipe, STDOUT_FILENO_1);
		}
		else if (data->is_pipe && !data->btree->right)
		{
			data->write_on_the_pipe = pipefd[1];
			data->read_in_the_pipe = -1;
			dup2(data->copy_fd, STDOUT_FILENO_1);
		}
		
		//////////////////////////////////////////////////////////////////////////

		ft_printf("[%s]\n", data->btree->content[i]);

		//////////////////////////////////////////////////////////////////////////

		if (!ft_strncmp(data->btree->content[i], "exit", ft_strlen_1(data->btree->content[i])))
			exit_(data);
		else if (!ft_strncmp(data->btree->content[i], "pwd", ft_strlen_1(data->btree->content[i])))
			pwd(data);
		else if (!ft_strncmp(data->btree->content[i], "cd", ft_strlen_1(data->btree->content[i])))
			cd(data);
		else if (!ft_strncmp(data->btree->content[i], "echo", ft_strlen_1(data->btree->content[i])))
			echo(data);
		else if (!ft_strncmp(data->btree->content[i], "env", ft_strlen_1(data->btree->content[i])))
			env(data);
		else if (!ft_strncmp(data->btree->content[i], "export", ft_strlen_1(data->btree->content[i])))
			export(data);
		else if (!ft_strncmp(data->btree->content[i], "unset", ft_strlen_1(data->btree->content[i])))
			unset(data);
		else
			other_command(data);
		
		/////////////////////////////////////////////////////////////////////////
		
		data->btree = data->btree->right;
	}

	free_all_data(cpy_data);
}





/* v2 */

void	master(char *command, t_data *data)
{
	int		i;
	int		pid;
	char	*path;
	t_btree	*aux;

	insert_data(data, command);
	aux = data->btree;
	path = NULL;
	while (aux)
	{
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		i = 0;
		if (ft_strlen_1(aux->content[i]) == 0)
			i++;
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		if (ft_strnstr(aux->content[i], "/", ft_strlen_1(aux->content[i])) ||
			list_builtins(aux->content[i]))
			path = ft_strdup(aux->content[i]);
		else
			path = get_valid_path(data);

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		pid = fork();
		if (pid == 0)
		{
			/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			if (path == NULL)
			{
				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				change_environment_variables_question_mark(127, data);
				write(2, "command not found: \n", 20);
				ft_putstr_fd(aux->content[i], 2);

				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				if (data->path)
					free_mtx(data->path);
				if (data->envp)
					free_mtx(data->envp);
				free_all_data(data);
				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				exit(127);
				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			}
			else if (!ft_strncmp(aux->content[i], "exit", ft_strlen_1(aux->content[i])))
			{
				free(path);
				exit_(data);
			}
			else if (!ft_strncmp(aux->content[i], "pwd", ft_strlen_1(aux->content[i])))
				pwd(data);
			else if (!ft_strncmp(aux->content[i], "cd", ft_strlen_1(aux->content[i])))
				cd(data);
			else if (!ft_strncmp(aux->content[i], "echo", ft_strlen_1(aux->content[i])))
				echo(data);
			else if (!ft_strncmp(aux->content[i], "env", ft_strlen_1(aux->content[i])))
				env(data);
			else if (!ft_strncmp(aux->content[i], "export", ft_strlen_1(aux->content[i])))
				export(data);
			else if (!ft_strncmp(aux->content[i], "unset", ft_strlen_1(aux->content[i])))
				unset(data);
			else
				execve(path, aux->content, data->envp);

			change_environment_variables_question_mark(0, data);
			
			if (data->path)
				free_mtx(data->path);
			if (data->envp)
				free_mtx(data->envp);
			
			free_all_data(data);
			
			free(path);
			
			exit(0);
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		}
		else
		{
			wait(NULL);
			free(path);
			aux = aux->right;
		}
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
	// ft_printf("|\n\n\n\n\n\n\n\n\n\n\n|");
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// if (!ft_strncmp(aux->content[i], "exit", ft_strlen_1(aux->content[i])))
	// {
	// 	if (data->path)
	// 	{
	// 		free_mtx(data->path);
	// 		data->path = NULL;
	// 	}
	// 	if (data->envp)
	// 	{
	// 		free_mtx(data->envp);
	// 		data->envp = NULL;
	// 	}
	// }
	// free_all_data(data);
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}









////////////////////////////////////////////////////////////////////////////////////////////////////////

t_extract	extract_redirection_character(char *str)
{
	int			pos;
	char		*str_strim;
	t_extract	ext;

	init_extract(&ext);
	pos = get_position_chr('>', str);
	while ((str[pos + ext.end] == ' ')
		|| (str[pos + ext.end] == '>')
		|| (str[pos + ext.end] == '<'))
		ext.end++;
	while (((pos - ext.start) >= 0)
		&& ((str[pos + ext.start] == ' ')
		|| (str[pos + ext.start] == '>')
		|| (str[pos + ext.start] == '<')))
		ext.start++;
	ext.end++;
	ext.start--;
	str_strim = ft_substr(str, (pos - ext.start), ext.end);
	ext.string = ft_strtrim(str_strim, " ");
	free(str_strim);
	return (ext);
}

// t_extract	**extract_all_redirection_characters(char *str)
// {
// 	t_extract	**mtx_extx;	
// }
////////////////////////////////////////////////////////////////////////////////////////////////////////





















/////////////
static bool	condition_extract(int i, int pos, char *str, char **list)
{
	int	len;

	len = ft_strlen(str);
	return ((pos != 0 && ((pos + 1 < len && str[pos + 1] != list[i][0])
					|| ((pos + 1 < len && str[pos + 1] == list[i][0])
					&& (pos + 2 < len && str[pos + 2] != list[i][0]))))
			|| (pos == 0 && ((pos + 1 < len && str[pos + 1] != list[i][0])
					|| ((pos + 1 < len && str[pos + 1] == list[i][0])
					&& (pos + 2 < len && str[pos + 2] != list[i][0]))))
			|| (pos != 0));
}

static bool	condition_to_add(char *str, char **new_content)
{
	return (str_in_matrix(str, new_content) == false
			&& (count_extract_redirection('<', str) == 0)
			&& (count_extract_redirection('>', str) == 0));
}

int	new_repartision(int iter, char *str, char **new_content)
{
	int			i;
	int			pos;
	static char	*list[] = {"<>", ">>", "<<","<", ">", NULL};

	i = 0;
	while (list[i])
	{
		pos = ft_strnpos(str, list[i], ft_strlen(str));
		if (ft_strncmp(str + pos, list[i], ft_strlen(list[i])) == 0
			&& condition_extract(i, pos, str, list))
		{
			many_redirection(str, new_content, &iter);
			break ;
		}
		else if (condition_to_add(str, new_content))
		{
			new_content[iter] = ft_strdup(str);
			iter++;
			break ;
		}
		i++;
	}
	return (iter);
}
/////////////

char	**reset_the_array_for_redirection(char **content)
{
	int		i;
	int		iter;
	int		len_m;
	char	**new_content;

	i = 0;
	len_m = 0;
	len_m = len_matrix(content);
	while (content[i])
	{
		len_m = str_in_list_redirection(content[i], len_m);
		i++;
	}
	if (len_matrix(content) == len_m)
		return (NULL);
	new_content = (char **)ft_calloc(len_m + 1, sizeof(char *));
	i = 0;
	iter = 0;
	while (content[i])
	{
		iter = new_repartision(iter, content[i], new_content);
		i++;
	}
	return (new_content);
}

int	main(void)
{
	int		i;
	char	**new_content;
	char	**content;

	content = (char **)ft_calloc(9, sizeof(char *));
	content[0] = ft_strdup("echo>file");
	content[1] = ft_strdup("test");
	content[2] = ft_strdup("test1");
	content[3] = ft_strdup("test2");
	new_content = reset_the_array_for_redirection(content);
	if (new_content)
	{
		i = 0;
		while (new_content[i])
		{
			printf("new_content[%d] = %s\n", i, new_content[i]);
			i++;
		}
		free_matrix(new_content);
	}
	free_matrix(content);
	return (0);
}














/////////////////////////////////////////////////////////////////////////////
void	change_fd(int *aux_pipefd, int pipefd[2], t_new_list *aux, t_data *data)
{
	if (aux != data->list)
	{
		dup2((*aux_pipefd), STDIN_FILENO);
		close((*aux_pipefd));
	}
	if (aux->next != NULL)
	{
		dup2(pipefd[1], STDOUT_FILENO);
		close(pipefd[1]);
		close(pipefd[0]);
	}
}

void	pass_the_fd(int *aux_pipefd, int pipefd[2], t_new_list *aux)
{
	if ((*aux_pipefd) != -1)
		close((*aux_pipefd));
	if (aux->next != NULL)
	{
		close(pipefd[1]);
		(*aux_pipefd) = pipefd[0];
	}
}

/////////////////////////////////////////////////////////////////////////////
// echo | |
// bash: syntax error near unexpected token `|'
void	master(char *command, t_data *data)
{
	int			i;
	t_new_list	*aux;
	int			value_redirection;
	pid_t		pid;
	int			pipefd[2];
	int			aux_pipefd;

	if (simple_error(command))
		return ;
	value_redirection = is_redirection(command);
	insert_data(data, command);
	aux = data->list;
	if (data->is_pipe == false)
	{
		while (aux)
		{
			i = 0;
			if (ft_strlen(aux->content[i]) == 0)
				i++;
			if (value_redirection == 1)
				redirection(aux, data);
			else if (value_redirection == 0)
				execute_command(i, aux, data);
			aux = aux->next;
		}
	}
	else
	{
		while (aux)
		{
			// ft_printf("[%s]\n", aux->content[0]);
			if (aux->next != NULL)
				pipe(pipefd);
			pid = fork();
			if (pid == 0)
			{
				change_fd(&aux_pipefd, pipefd, aux, data);
				if (value_redirection == 1)
					redirection(aux, data);
				else if (value_redirection == 0)
					execute_command(0, aux, data);
				exit(0);
			}
			else
			{
				pass_the_fd(&aux_pipefd, pipefd, aux);
				wait(NULL);
			}
			aux = aux->next;
		}
	}
	free_all_data(data);
}




















/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   signals.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: cramos-c <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/12/09 12:04:26 by cramos-c          #+#    #+#             */
/*   Updated: 2024/12/09 12:04:37 by cramos-c         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "run.h"

char	*substring(const char *str, int start, int end)
{
	int 	len;
	char	*sub;

	len = strlen(str);
	if (start > end)
		return (NULL);
	if (start < 0)
		start = 0;
	if (end > len)
		end = len;
	sub = (char *)malloc((end - start + 1) * sizeof(char));
	if (!sub)
		return (NULL);
	ft_strlcpy(sub, str + start, end - start + 1);
	sub[end - start] = '\0';
	return (sub);
}

///////////
char	*invert_str(char *str)
{
	int		i;
	int		len;
	char	*new_string;

	if (!str)
		return (NULL);
	i = 0;
	len = ft_strlen(str);
	new_string = ft_calloc(len + 1, sizeof(char));
	while (str[i])
		new_string[len-- - 1] = str[i++];
	return (new_string);
}

bool	condition_put_env_quotes(char *str, char *sub) // """$USER"""
{
	return (first_str('\'', str) && (count_chr('\'', sub) % 2 != 0)
		&& (count_chr('"', sub) > 0));
}

bool	condition_extract_value_env_quotes(char *str, char *sub) // '''name'''
{
	return (first_str('"', str) && (count_chr('"', sub) % 2 != 0)
		&& (count_chr('\'', sub) > 0));
}

bool	condition_put_env(char *str, char *sub) // $USER
{
	return ((count_chr('"', str) == 0 && (count_chr('\'', sub) % 2 != 0))
		 || (first_str('"', str) && (count_chr('"', sub) % 2 == 0)
		 		&& (count_chr('\'', sub) > 0)));
}

bool	condition_extract_value_env(char *str, char *sub) // name
{
	return ((count_chr('"', sub) == 0 && count_chr('\'', sub) == 0)
		 || (count_chr('\'', sub) == 0 && (count_chr('"', sub) > 0))
		 || (count_chr('"', sub) == 0 && (count_chr('\'', sub) % 2 == 0))
		 || (first_str('\'', str) && (count_chr('\'', sub) % 2 == 0)
		 	&& (count_chr('"', sub) > 0)));
}
///////////

///////////
char	*put_env(char *str, char *sub)
{
	int 	pos;
	int		end;
	char	*aux;
	char	*value_env;

	value_env = ft_strtrim(str, "'\"");
	pos = 0;
	while (value_env[pos] && value_env[pos] == '$')
		pos++;
	end  = pos + 1;
	while (value_env[end] && value_env[end] != '$'
		&& value_env[end] != '\'' && value_env[end] != '"')
		end++;
	free(value_env);
	aux = substring(str, 0, end);
	free(sub);
	return (aux);
}

char	*extract_value_env(char *str, char *sub, t_data *data)
{
	int 	pos;
	int		end;
	char	*aux;
	char	*value_env;

	value_env = ft_strtrim(str, "'\"");
	pos = 0;
	while (value_env[pos] && value_env[pos] == '$')
		pos++;
	end  = pos + 1;
	while (value_env[end] && value_env[end] != '$'
		&& value_env[end] != '\'' && value_env[end] != '"')
		end++;
	free(value_env);
	aux = substring(str, 0, end);
	pos = 0;
	while (aux[pos] && aux[pos] == '$')
		pos++;
	value_env = ft_strdup(get_env(aux + pos, data));
	free(sub);
	return (value_env);
}

char	*extract_value_env_quotes(char *str, char *sub, t_data *data)
{
	int 	end;
	int 	start;
	char	*aux;
	char	*sub_str;
	char	*inv_sub;

	start = 0;
	while (str[start] != '$')
		start++;
	end = start + 1;
	while (ft_isalpha(str[end]))
		end++;
	aux = ft_strtrim(sub, "\"");
	inv_sub = invert_str(aux);
	free(aux);
	sub_str = substring(str, start, end);
	aux = ft_strdup(get_env(sub_str + 1, data));
	free(sub_str);
	sub_str = ft_strjoin(inv_sub, aux);
	free(aux);
	aux = ft_strjoin_free(sub_str, inv_sub);
	free(inv_sub);
	free(sub);
	return (aux);
}

char	*put_env_quotes(char *str, char *sub)
{
	int 	end;
	int 	start;
	char	*aux;
	char	*sub_str;
	char	*inv_sub;

	start = 0;
	while (str[start] != '$')
		start++;
	end = start + 1;
	while (ft_isalpha(str[end]))
		end++;
	aux = ft_strtrim(sub, "'");
	inv_sub = invert_str(aux);
	free(aux);
	sub_str = substring(str, start, end);
	aux = ft_strdup(sub_str);
	free(sub_str);
	sub_str = ft_strjoin(inv_sub, aux);
	free(aux);
	aux = ft_strjoin_free(sub_str, inv_sub);
	free(inv_sub);
	free(sub);
	return (aux);
}

char	*extract_main_value_env(int i, char *str, t_data *data)
{
	char	*sub;

	sub = ft_substr(str, 0, ft_strchr(str, '$') - str);
	if (condition_put_env(str, sub))
		return (put_env(str, sub));
	else if (condition_extract_value_env(str, sub))
		return (extract_value_env(str, sub, data));
	else if (condition_extract_value_env_quotes(str, sub))
		return (extract_value_env_quotes(str, sub, data));
	else if (condition_put_env_quotes(str, sub))
		return (put_env_quotes(str, sub));
	
	return (NULL);

}

///////////
// void	check_environment_variable_expansion(char **str, t_data *data)

static int	adjust_position_variation(int pos, char *sub, char *str, t_data *data)
{
	int len;

	len = ft_strlen(str);

	if (pos == 0)
		pos = ft_strlen(sub);
	if (str[pos] == '$')
		pos++;
	while ((pos < len) && str[pos] != '\''
		&& str[pos] != '"' && str[pos] != '$')
		pos++;
	pos += ft_strlen(sub);
	return (pos);
}

char	*get_environment_variation_expansion(int i, char ***matrix, t_data *data)
{
	int		len;
	int		pos;
	char	*sub;
	char	*join;
	char	*value_env;

	pos = 0;
	join = NULL;
	len = ft_strlen((*matrix)[i]);
	while (pos < len)
	{
		value_env = extract_main_value_env(i, (*matrix)[i] + pos, data);
		sub = ft_substr(((*matrix)[i] + pos), 0,
			ft_strchr(((*matrix)[i] + pos), '$') - ((*matrix)[i] + pos));
		pos += adjust_position_variation(pos, sub, (*matrix)[i], data);
		if (join == NULL)
			join = ft_strjoin_free(value_env, join);
		else
			join = ft_strjoin_free(join, value_env);
		free(sub);
	}
	free(value_env);
	return (join);
}

void	environment_variation_expansion(char ***matrix, t_data *data)
{
	int		i;
	int		old_size;
	int		new_size;
	char	*value_env;

	while ((*matrix)[i])
	{
		if (ft_strchr((*matrix)[i], '$'))
		{
			value_env = get_environment_variation_expansion(i, matrix, data);
			old_size = ft_strlen((*matrix)[i]);
			new_size = ft_strlen(value_env);
			(*matrix)[i] = ft_realloc((*matrix)[i], old_size, new_size + 1);
			ft_strlcpy((*matrix)[i], value_env, new_size + 1);
			free(value_env);
		}
		i++;
	}
}

int	main(void)
{
	int		i;
	t_data	data;
	char	**matrix;

	i = 0;
	init_data(&data);
	data.envp = get_all_environment();
	matrix = split_2("echo:$USER", ':');
	environment_variation_expansion(&matrix, &data);
	free_matrix(matrix);
	free_data(&data);
	return (0);
}
