#include "minishell.h"
/**/
static void	get_env_variable(int *i1, int *i2, t_data *data)
{
	int		c;
	char	*env_var;

	c = 1;
	while (data->btree->content[*i1][*i2 + c] && data->btree->content[*i1][*i2 + c] != ' ')
		c++;
	env_var = ft_calloc(c + 1, sizeof(char));
	c = 0;
	(*i2)++;
	while (data->btree->content[*i1][*i2] && data->btree->content[*i1][*i2] != ' ')
	{
		env_var[c] = data->btree->content[*i1][*i2];
		(*i2)++;
		c++;
	}
	data->put_amb = getenv(env_var);
	if (data->put_amb)
	{
		data->output = ft_strjoin_free(data->output, data->put_amb);
		ft_printf("%s", data->put_amb);
		data->space = true;
	}
	else if (data->put_amb == NULL && data->btree->content[*i1 + 1] == NULL)
	{
		data->output = ft_strjoin_free(data->output, "\n");
		ft_printf("\n");
		data->space = true;
	}
	else
		data->space = false;
	if (data->put_amb)
		free(env_var);
}

static void	scroll_word(int i1, t_data *data)void	echo(t_data *data)
{
	int	i1;
	int	i2;
	int		c;
	char	*env_var;

	i1 = 0;
	data->output = ft_calloc(1, sizeof(char));
	while (data->btree->content[i1])
		i1++;
	if (!ft_strncmp(data->btree->content[i1 - 1], "echo", ft_strlen(data->btree->content[i1 - 1])))
	{
		data->output = ft_charjoin_free(data->output, '\n');
		ft_putchar_fd('\n', 1);
		return ;
	}
	i1 = 1;
	while (data->btree->content[i1] && ft_strnstr(data->btree->content[i1], "-n", ft_strlen(data->btree->content[i1])))
		i1++;	

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	while (data->btree->content[i1])
	{
		i2 = 0;
		while (data->btree->content[i1][i2])
		{
			if (data->btree->content[i1][i2] != '$' && data->btree->content[i1][i2] != '"' && data->btree->content[i1][i2] != '\'')
			{
				data->output = ft_charjoin_free(data->output, data->btree->content[i1][i2]);
				ft_putchar_fd(data->btree->content[i1][i2], 1);
				data->space = true;
			}
			else if (data->btree->content[i1][i2] == '$')
			{
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				c = 1;
				while (data->btree->content[i1][i2 + c] && data->btree->content[i1][i2 + c] != ' ')
					c++;
				env_var = ft_calloc(c + 1, sizeof(char));
				c = 0;
				(i2)++;
				while (data->btree->content[i1][i2] && data->btree->content[i1][i2] != ' ')
				{
					env_var[c] = data->btree->content[i1][i2];
					(i2)++;
					c++;
				}
				data->put_amb = getenv(env_var);
				if (data->put_amb)
				{
					data->output = ft_strjoin_free(data->output, data->put_amb);
					ft_printf("%s", data->put_amb);
					data->space = true;
				}
				else if (data->put_amb == NULL && data->btree->content[i1 + 1] == NULL)
				{
					data->output = ft_strjoin_free(data->output, "\n");
					ft_printf("\n");
					data->space = true;
				}
				else
					data->space = false;
				if (data->put_amb)
					free(env_var);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			}
			i2++;
		}
		if (data->btree->content[i1 + 1] && data->space)
			ft_putchar_fd(' ', 1);

		i1++;
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/* -n */
	if (ft_strncmp(data->btree->content[i1 - 1], "-n", ft_strlen(data->btree->content[i1 - 1])))
	{
		data->output = ft_charjoin_free(data->output, '\n');
		ft_putchar_fd('\n', 1);
	}
	if (data->output[0] == '\0')
		free(data->output);
	}

		}
		else if (data->btree->content[i1][i2] == '$')
			get_env_variable(&i1, &i2, data);
		i2++;
	}
	if (data->btree->content[i1 + 1] && data->space)
		ft_putchar_fd(' ', 1);
}

void	echo(t_data *data)
{
	int	i1;

	i1 = 0;
	data->output = ft_calloc(1, sizeof(char));
	while (data->btree->content[i1])
		i1++;
	if (!ft_strncmp(data->btree->content[i1 - 1], "echo", ft_strlen(data->btree->content[i1 - 1])))
	{
		data->output = ft_charjoin_free(data->output, '\n');
		ft_putchar_fd('\n', 1);
		return ;
	}

	i1 = 1;
	while (data->btree->content[i1] && ft_strnstr(data->btree->content[i1], "-n", ft_strlen(data->btree->content[i1])))
		i1++;
	while (data->btree->content[i1])
	{
		scroll_word(i1, data);
		i1++;
	}
	
	if (ft_strncmp(data->btree->content[i1 - 1], "-n", ft_strlen(data->btree->content[i1 - 1])))
	{
		data->output = ft_charjoin_free(data->output, '\n');
		ft_putchar_fd('\n', 1);
	}
	if (data->output[0] == '\0')
		free(data->output);
}































































void	echo(t_data *data)
{
	int	i1;
	int	i2;
	int		c;
	char	*env_var;

	i1 = 0;
	data->output = ft_calloc(1, sizeof(char));
	while (data->btree->content[i1])
		i1++;
	if (!ft_strncmp(data->btree->content[i1 - 1], "echo", ft_strlen(data->btree->content[i1 - 1])))
	{
		data->output = ft_charjoin_free(data->output, '\n');
		ft_putchar_fd('\n', 1);
		return ;
	}
	i1 = 1;
	while (data->btree->content[i1] && ft_strnstr(data->btree->content[i1], "-n", ft_strlen(data->btree->content[i1])))
		i1++;	

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	while (data->btree->content[i1])
	{
		i2 = 0;
		while (data->btree->content[i1][i2])
		{
			if (data->btree->content[i1][i2] != '$' && data->btree->content[i1][i2] != '"' && data->btree->content[i1][i2] != '\'')
			{
				data->output = ft_charjoin_free(data->output, data->btree->content[i1][i2]);
				ft_putchar_fd(data->btree->content[i1][i2], 1);
				data->space = true;
			}
			else if (data->btree->content[i1][i2] == '$')
			{
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				c = 1;
				while (data->btree->content[i1][i2 + c] && data->btree->content[i1][i2 + c] != ' ')
					c++;
				env_var = ft_calloc(c + 1, sizeof(char));
				c = 0;
				(i2)++;
				while (data->btree->content[i1][i2] && data->btree->content[i1][i2] != ' ')
				{
					env_var[c] = data->btree->content[i1][i2];
					(i2)++;
					c++;
				}
				data->put_amb = getenv(env_var);
				if (data->put_amb)
				{
					data->output = ft_strjoin_free(data->output, data->put_amb);
					ft_printf("%s", data->put_amb);
					data->space = true;
				}
				else if (data->put_amb == NULL && data->btree->content[i1 + 1] == NULL)
				{
					data->output = ft_strjoin_free(data->output, "\n");
					ft_printf("\n");
					data->space = true;
				}
				else
					data->space = false;
				if (data->put_amb)
					free(env_var);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			}
			i2++;
		}
		if (data->btree->content[i1 + 1] && data->space)
			ft_putchar_fd(' ', 1);

		i1++;
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/* -n */
	if (ft_strncmp(data->btree->content[i1 - 1], "-n", ft_strlen(data->btree->content[i1 - 1])))
	{
		data->output = ft_charjoin_free(data->output, '\n');
		ft_putchar_fd('\n', 1);
	}
	if (data->output[0] == '\0')
		free(data->output);
}
