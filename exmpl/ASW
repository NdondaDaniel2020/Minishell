
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

typedef struct s_split
{
	int			len;
    int			in_quotes;
    int			substr_count;
    char		**result;
    char		*start;
    char		*end;
} 			t_split;


void	init_split(t_split *split, char *str)
{
	split->len = 0;
	split->in_quotes = 0;
	split->substr_count = count_substrings(str);
	split->result = malloc((split->substr_count + 1) * sizeof(char *));
	split->start = str;
	split->end = str;
}

// Função para contar substrings
int count_substrings(const char *str)
{
    int count = 0;
    int in_quotes = 0;

    while (*str)
    {
        if (*str == '"' || *str == '\'')
        {
            in_quotes = !in_quotes;
        }
        else if (isspace(*str) && !in_quotes)
        {
            count++;
            while (isspace(*str)) str++;
            continue;
        }
        str++;
    }
    return (count + 1);
}

void	traverse_array(t_split *split)
{
	
}

// Função split
char **split(char *str)
{
    int			i;
	t_split		split;

    i = 0;
	init_split(&split, str);
    while (*split.end)
    {
        if (*split.end == '"' || *split.end == '\'')
            split.in_quotes = !split.in_quotes;
        else if (isspace(*split.end) && !split.in_quotes)
        {

            split.len = split.end - split.start;
            result[i] = malloc((split.len + 1) * sizeof(char));
            strncpy(result[i], split.start, split.len);
            result[i][split.len] = '\0';
            i++;
            while (isspace(*split.end))
				split.end++;
            split.start = split.end;

            continue ;
        }
        split.end++;
    }
    split.result[i] = strdup(split.start);
    split.result[split.substr_count] = NULL;
    return (split.result);
}

// Função para liberar a memória alocada pelo split
void free_split(char **split_result)
{
    int i = 0;
    while (split_result[i] != NULL)
    {
        free(split_result[i]);
        i++;
    }
    free(split_result);
}

// Função principal para teste
int main()
{
    char *str = "TEST \"(TEST  1234)\" '()()' \"(TEST          1234)\"'()  ()' '\"$HOME\"' \"'$HOME'\"         \"'\"$HOME\"'\"'$HOME'\"\"";
	char **result = split(str);

    for (int i = 0; result[i] != NULL; i++)
    {
        printf("%s\n", result[i]);
        free(result[i]);
    }
    free(result);

    return 0;
}
